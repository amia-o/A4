{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "47"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import imaplib, email, getpass\n",
    "from email.utils import getaddresses\n",
    "\n",
    "# Email settings\n",
    "imap_server = 'imap.gmail.com'\n",
    "imap_user = 'amia_oberai@brown.edu'\n",
    "imap_password = 'yxwueoaxpabeqgdj'\n",
    "\n",
    "# Connection\n",
    "conn = imaplib.IMAP4_SSL(imap_server)\n",
    "(retcode, capabilities) = conn.login(imap_user, imap_password)\n",
    "\n",
    "# Specify email folder\n",
    "conn.select('\"[Gmail]/All Mail\"', readonly=True)\n",
    "\n",
    "# Search for email ids between dates specified\n",
    "result, data = conn.uid('search', None, '(SINCE \"28-Jan-2015\" BEFORE \"14-Aug-2015\")')\n",
    "\n",
    "uids = data[0].decode('utf-8').split()\n",
    "\n",
    "# Download headers\n",
    "result, data = conn.uid('fetch', ','.join(uids), '(BODY[HEADER.FIELDS (MESSAGE-ID FROM TO CC DATE IN-REPLY-TO SUBJECT)])')\n",
    "\n",
    "# Where data will be stored\n",
    "raw_file = open('raw-email-rec.tsv', 'w')\n",
    "\n",
    "# Header for TSV file\n",
    "raw_file.write(\"Message-ID\\tDate\\tFrom\\tTo\\tCc\\tIn-Reply-To\\tSubject\\n\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "# Parse data and spit out info\n",
    "for i in range(0, len(data)):\n",
    "     \n",
    "    # If the current item is _not_ an email header\n",
    "    if len(data[i]) != 2:\n",
    "        continue\n",
    "     \n",
    "    # Okay, it's an email header. Parse it.\n",
    "    msg = email.message_from_string(data[i][1].decode('utf-8'))\n",
    "    mids = msg.get_all('message-id', None)\n",
    "    mdates = msg.get_all('date', None)\n",
    "    senders = msg.get_all('from', [])\n",
    "    receivers = msg.get_all('to', [])\n",
    "    ccs = msg.get_all('cc', [])\n",
    "    inreplyto = msg.get_all('in-reply-to', [])\n",
    "    subject = msg.get_all('subject', [])\n",
    "     \n",
    "    row = \"\\t\" if not mids else mids[0] + \"\\t\"\n",
    "    row += \"\\t\" if not mdates else mdates[0] + \"\\t\"\n",
    "     \n",
    "    # Only one person sends an email, but just in case\n",
    "    for name, addr in getaddresses(senders):\n",
    "        row += addr + \" \"\n",
    "    row += \"\\t\"\n",
    "     \n",
    "    # Space-delimited list of those the email was addressed to\n",
    "    for name, addr in getaddresses(receivers):\n",
    "        row += addr + \" \"\n",
    "    row += \"\\t\"\n",
    "     \n",
    "    # Space-delimited list of those who were CC'd\n",
    "    for name, addr in getaddresses(ccs):\n",
    "        row += addr + \" \"\n",
    "    row += \"\\t\"\n",
    "    \n",
    "    # Space-delimited list of those the email was addressed to\n",
    "    for name, addr in getaddresses(inreplyto):\n",
    "        row += addr \n",
    "    row += \"\\t\"\n",
    "        \n",
    "    # Space-delimited list of those the email was addressed to\n",
    "    for name, addr in getaddresses(subject):\n",
    "        row += addr + \" \"     \n",
    "        \n",
    "    row += \"\\n\"\n",
    "     \n",
    "    # Just going to output tab-delimited, raw data.\n",
    "    raw_file.write(row)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Done with file, so close it\n",
    "raw_file.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "data_tsv = r'/Users/amiaoberai/Desktop/desktop-items/Spring_2015/Personal-informatics/A4/raw-email-rec.tsv'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "data_raw = pd.read_csv(data_tsv, sep='\\t')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "all_messages = {}\n",
    "counter = 0\n",
    "for row in data_raw.iterrows():\n",
    "    counter +=1\n",
    "    if counter > 5000:\n",
    "        break   \n",
    "    message_id = row[1][0]\n",
    "    date = row[1][1]\n",
    "    from1 = row[1][2]\n",
    "    to = row[1][3]\n",
    "    reply = row[1][5]\n",
    "    all_messages[message_id] = [date, from1, to, reply]\n",
    "#print(all_messages)\n",
    "#print(all_messages['<6074-889-YB78WHZ-7WNAZ-WCKRK-BMKUS7-ZGFYLR-H-M2-20150101-e3227ab444481893@e-dialog.com>'][2])    \n",
    " "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Thu, 01 Jan 2015 00:11:51 -0500\n",
      "Sun, 4 Jan 2015 07:01:18 -0800\n",
      "-294567.0\n"
     ]
    }
   ],
   "source": [
    "import dateutil\n",
    "time1 = (dateutil.parser.parse(all_messages['<6074-889-YB78WHZ-7WNAZ-WCKRK-BMKUS7-ZGFYLR-H-M2-20150101-e3227ab444481893@e-dialog.com>'][0]))\n",
    "time2 =(dateutil.parser.parse(all_messages['<0.1.11.B9A.1D0282F4B6ACD76.0@omp.citysportsmail.com>'][0]))\n",
    "\n",
    "print(all_messages['<6074-889-YB78WHZ-7WNAZ-WCKRK-BMKUS7-ZGFYLR-H-M2-20150101-e3227ab444481893@e-dialog.com>'][0])\n",
    "print(all_messages['<0.1.11.B9A.1D0282F4B6ACD76.0@omp.citysportsmail.com>'][0])\n",
    "print((time1 - time2).total_seconds())   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "#create csv\n",
    "import csv\n",
    "with open('a4.csv', 'w') as csvfile:\n",
    "    featurewriter = csv.writer(csvfile)\n",
    "    featurewriter.writerow(['weekday', 'dayTime', 'importantPerson', 'responseTime'])\n",
    "    \n",
    "    #iterate through every message-id\n",
    "    for item in all_messages:\n",
    "\n",
    "        if all_messages[item][1] != 'amia_oberai@brown.edu ':\n",
    "\n",
    "            #iterate through every message-id \n",
    "            for replies in all_messages:\n",
    "                \n",
    "                if all_messages[replies][1] == 'amia_oberai@brown.edu ':\n",
    "                    \n",
    "                    #check if outer for loop message-id matches inner for loop message-id's in-reply-to\n",
    "                    if str(item) == \"<\" + str(all_messages[replies][3]) + \">\":\n",
    "                        \n",
    "                        #print(\"sup\" + (str(all_messages[replies][3])))\n",
    "\n",
    "                        #convert times\n",
    "                        time1 = dateutil.parser.parse(all_messages[item][0])\n",
    "                        time2 = dateutil.parser.parse(all_messages[replies][0])\n",
    "                        \n",
    "                        #check features\n",
    "                        if all_messages[item][0].split(',')[0] == 'Sat' or all_messages[item][0].split(',')[0] == 'Sun':\n",
    "                            #weekend\n",
    "                            weekday = 0\n",
    "                        else:\n",
    "                            #weekday\n",
    "                            weekday=1\n",
    "                        \n",
    "                        if all_messages[item][1] == 'jeff_huang@brown.edu ' or all_messages[item][1] == 'jlance@us.ibm.com ' or all_messages[item][1] == 'Thomas_Serre@brown.edu ':\n",
    "                           \n",
    "                            #important\n",
    "                            importantPerson = 1\n",
    "                        else:\n",
    "                            #not important\n",
    "                            importantPerson = 0\n",
    "                                                \n",
    "                        #time init email sent\n",
    "                        a = (str(time1))\n",
    "                        #print(a)\n",
    "                        #print(float(a[11:13]))\n",
    "                        #print(a[11:19])\n",
    "                        \n",
    "                        #if init email was sent between 4pm and 11pm\n",
    "                        if (float(a[11:13])) > 16 and (float(a[11:13])) < 23:\n",
    "                            #day time\n",
    "                            dayTime = 1\n",
    "                        else:\n",
    "                            #night time\n",
    "                            dayTime = 0\n",
    "                        \n",
    "                        #calculate response time in seconds\n",
    "                        secondsReply = ((time2 - time1).total_seconds()) \n",
    "                        #convert response time to hours\n",
    "                        hoursReply = secondsReply/3600\n",
    "                        \n",
    "                        #print(weekday)\n",
    "                        #print(dayTime)\n",
    "                        #print(importantPerson)\n",
    "                        #print(hoursReply)\n",
    "\n",
    "                        \n",
    "                        featurewriter.writerow([str(weekday), str(dayTime), str(importantPerson), str(hoursReply)])\n",
    "                        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "58.4070892006\n",
      "[-12.04479704 -24.78622236  -0.18387404]\n",
      "weekend, nighttime, unimportant: 0,0,0  [ 58.4070892]\n",
      "weekend, daytime, unimportant: 0,1,0  [ 33.62086684]\n",
      "weekday, daytime, important: 1,1,1  [ 21.39219576]\n",
      "weekday, nighttime, important: 1,0,1  [ 46.17841812]\n",
      "weekday, nighttime, unimportant: 1,0,0  [ 46.36229216]\n",
      "weekday, daytime, unimportant: 1,1,0  [ 21.57606981]\n",
      "weekend, daytime, important: 0,1,1  [ 33.4369928]\n",
      "weekend, nighttime, important: 0,0,1  [ 58.22321516]\n",
      "score: 0.00505559257738\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/amiaoberai/anaconda/lib/python3.5/site-packages/sklearn/utils/validation.py:386: DeprecationWarning: Passing 1d arrays as data is deprecated in 0.17 and willraise ValueError in 0.19. Reshape your data either using X.reshape(-1, 1) if your data has a single feature or X.reshape(1, -1) if it contains a single sample.\n",
      "  DeprecationWarning)\n",
      "/Users/amiaoberai/anaconda/lib/python3.5/site-packages/sklearn/utils/validation.py:386: DeprecationWarning: Passing 1d arrays as data is deprecated in 0.17 and willraise ValueError in 0.19. Reshape your data either using X.reshape(-1, 1) if your data has a single feature or X.reshape(1, -1) if it contains a single sample.\n",
      "  DeprecationWarning)\n",
      "/Users/amiaoberai/anaconda/lib/python3.5/site-packages/sklearn/utils/validation.py:386: DeprecationWarning: Passing 1d arrays as data is deprecated in 0.17 and willraise ValueError in 0.19. Reshape your data either using X.reshape(-1, 1) if your data has a single feature or X.reshape(1, -1) if it contains a single sample.\n",
      "  DeprecationWarning)\n",
      "/Users/amiaoberai/anaconda/lib/python3.5/site-packages/sklearn/utils/validation.py:386: DeprecationWarning: Passing 1d arrays as data is deprecated in 0.17 and willraise ValueError in 0.19. Reshape your data either using X.reshape(-1, 1) if your data has a single feature or X.reshape(1, -1) if it contains a single sample.\n",
      "  DeprecationWarning)\n",
      "/Users/amiaoberai/anaconda/lib/python3.5/site-packages/sklearn/utils/validation.py:386: DeprecationWarning: Passing 1d arrays as data is deprecated in 0.17 and willraise ValueError in 0.19. Reshape your data either using X.reshape(-1, 1) if your data has a single feature or X.reshape(1, -1) if it contains a single sample.\n",
      "  DeprecationWarning)\n",
      "/Users/amiaoberai/anaconda/lib/python3.5/site-packages/sklearn/utils/validation.py:386: DeprecationWarning: Passing 1d arrays as data is deprecated in 0.17 and willraise ValueError in 0.19. Reshape your data either using X.reshape(-1, 1) if your data has a single feature or X.reshape(1, -1) if it contains a single sample.\n",
      "  DeprecationWarning)\n",
      "/Users/amiaoberai/anaconda/lib/python3.5/site-packages/sklearn/utils/validation.py:386: DeprecationWarning: Passing 1d arrays as data is deprecated in 0.17 and willraise ValueError in 0.19. Reshape your data either using X.reshape(-1, 1) if your data has a single feature or X.reshape(1, -1) if it contains a single sample.\n",
      "  DeprecationWarning)\n",
      "/Users/amiaoberai/anaconda/lib/python3.5/site-packages/sklearn/utils/validation.py:386: DeprecationWarning: Passing 1d arrays as data is deprecated in 0.17 and willraise ValueError in 0.19. Reshape your data either using X.reshape(-1, 1) if your data has a single feature or X.reshape(1, -1) if it contains a single sample.\n",
      "  DeprecationWarning)\n"
     ]
    }
   ],
   "source": [
    "data = pd.read_csv('a4.csv')\n",
    "data.head()\n",
    "\n",
    "# create X and y\n",
    "feature_cols = ['weekday', 'dayTime', 'importantPerson']\n",
    "X = data[feature_cols]\n",
    "y = data.responseTime\n",
    "\n",
    "#print(X)\n",
    "#print(y)\n",
    "\n",
    "# follow the usual sklearn pattern: import, instantiate, fit\n",
    "from sklearn.linear_model import LinearRegression\n",
    "lm = LinearRegression()\n",
    "lm.fit(X, y)\n",
    "\n",
    "# print intercept and coefficients\n",
    "print(lm.intercept_)\n",
    "print(lm.coef_)\n",
    "#print(zip(feature_cols, lm.coef_))\n",
    "\n",
    "# predict for a new observation\n",
    "print(\"weekend, nighttime, unimportant: 0,0,0  \"+ str(lm.predict([0, 0, 0])))\n",
    "print(\"weekend, daytime, unimportant: 0,1,0  \"+ str(lm.predict([0, 1, 0])))\n",
    "print(\"weekday, daytime, important: 1,1,1  \"+ str(lm.predict([1, 1, 1])))\n",
    "print(\"weekday, nighttime, important: 1,0,1  \"+ str(lm.predict([1, 0, 1])))\n",
    "print(\"weekday, nighttime, unimportant: 1,0,0  \"+ str(lm.predict([1, 0, 0])))\n",
    "print(\"weekday, daytime, unimportant: 1,1,0  \"+ str(lm.predict([1, 1, 0])))\n",
    "print(\"weekend, daytime, important: 0,1,1  \"+ str(lm.predict([0, 1, 1])))\n",
    "print(\"weekend, nighttime, important: 0,0,1  \"+ str(lm.predict([0, 0, 1])))\n",
    "\n",
    "# calculate the R-squared\n",
    "print(\"score: \" + str(lm.score(X, y)))\n",
    "\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
